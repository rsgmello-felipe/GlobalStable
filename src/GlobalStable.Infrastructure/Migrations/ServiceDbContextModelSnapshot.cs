// <auto-generated />
using System;
using GlobalStable.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GlobalStable.Infrastructure.Migrations
{
    [DbContext(typeof(ServiceDbContext))]
    partial class ServiceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("global_order_id_seq");

            modelBuilder.Entity("GlobalStable.Domain.Entities.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<decimal>("DepositFlatFee")
                        .HasColumnType("numeric")
                        .HasColumnName("deposit_flat_fee");

                    b.Property<decimal>("DepositPercentageFee")
                        .HasColumnType("numeric")
                        .HasColumnName("deposit_percentage_fee");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_updated_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("WalletAddress")
                        .HasColumnType("text")
                        .HasColumnName("wallet_address");

                    b.Property<decimal>("WithdrawalFlatFee")
                        .HasColumnType("numeric")
                        .HasColumnName("withdrawal_flat_fee");

                    b.Property<decimal>("WithdrawalPercentageFee")
                        .HasColumnType("numeric")
                        .HasColumnName("withdrawal_percentage_fee");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("GlobalStable.Domain.Entities.BalanceSnapshot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<long>("CurrencyId1")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<decimal>("IntervalBalance")
                        .HasColumnType("numeric(38, 18)")
                        .HasColumnName("interval_balance");

                    b.Property<long?>("LastTransactionId")
                        .HasColumnType("bigint")
                        .HasColumnName("last_transaction_id");

                    b.Property<long?>("PreviousBalanceSnapshotId")
                        .HasColumnType("bigint")
                        .HasColumnName("previous_balance_snapshot_id");

                    b.Property<decimal>("TotalBalance")
                        .HasColumnType("numeric")
                        .HasColumnName("total_balance");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("idx_balance_snapshot_account_id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CurrencyId1");

                    b.HasIndex("AccountId", "CreatedAt")
                        .HasDatabaseName("idx_balance_snapshot_account_created_at");

                    b.ToTable("balance_snapshots", (string)null);
                });

            modelBuilder.Entity("GlobalStable.Domain.Entities.BlockchainNetwork", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("NativeCurrencyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NativeCurrencyId");

                    b.ToTable("blockchain_network", (string)null);
                });

            modelBuilder.Entity("GlobalStable.Domain.Entities.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Precision")
                        .HasColumnType("integer")
                        .HasColumnName("precision");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("currency", (string)null);
                });

            modelBuilder.Entity("GlobalStable.Domain.Entities.CurrencyBlockchain", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BlockchainNetworkId")
                        .HasColumnType("bigint")
                        .HasColumnName("blockchain_network_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.HasKey("Id");

                    b.HasIndex("BlockchainNetworkId");

                    b.HasIndex("CurrencyId", "BlockchainNetworkId")
                        .IsUnique();

                    b.ToTable("currency_blockchain", (string)null);
                });

            modelBuilder.Entity("GlobalStable.Domain.Entities.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("QuoteSpread")
                        .HasColumnType("numeric")
                        .HasColumnName("quote_spread");

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tax_id");

                    b.HasKey("Id");

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("GlobalStable.Domain.Entities.DepositOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('global_order_id_seq')");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<string>("BankReference")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("bank_reference");

                    b.Property<string>("BlockchainNetworkId")
                        .HasColumnType("text")
                        .HasColumnName("blockchain_network_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<string>("E2EId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("e2e_id");

                    b.Property<DateTimeOffset>("ExpireAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expire_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<decimal>("FeeAmount")
                        .HasColumnType("numeric(38, 18)")
                        .HasColumnName("fee_amount");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_updated_by");

                    b.Property<decimal>("RequestedAmount")
                        .HasColumnType("numeric(38, 18)")
                        .HasColumnName("requested_amount");

                    b.Property<string>("StatusDescription")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("status_description");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric(38, 18)")
                        .HasColumnName("total_amount");

                    b.Property<string>("WalletAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("wallet_address");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("idx_deposit_order_account_id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("idx_deposit_order_status_id");

                    b.ToTable("deposit_order", (string)null);
                });

            modelBuilder.Entity("GlobalStable.Domain.Entities.OrderHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<long?>("DepositOrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("deposit_order_id");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("order_type");

                    b.Property<long?>("QuoteOrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("StatusDescription")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("status_description");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    b.Property<long?>("WithdrawalOrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("withdrawal_order_id");

                    b.HasKey("Id");

                    b.HasIndex("DepositOrderId")
                        .HasDatabaseName("idx_order_history_deposit_order_id");

                    b.HasIndex("WithdrawalOrderId")
                        .HasDatabaseName("idx_order_history_withdrawal_order_id");

                    b.ToTable("order_history", (string)null);
                });

            modelBuilder.Entity("GlobalStable.Domain.Entities.OrderStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("ref_order_status", (string)null);
                });

            modelBuilder.Entity("GlobalStable.Domain.Entities.PendingTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(38, 18)")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("order_type");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("idx_pending_transaction_account_id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("idx_pending_transaction_order_id");

                    b.HasIndex("AccountId", "CreatedAt")
                        .HasDatabaseName("idx_pending_transaction_account_created_at");

                    b.ToTable("pending_transactions", (string)null);
                });

            modelBuilder.Entity("GlobalStable.Domain.Entities.QuoteOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BaseAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("base_account_id");

                    b.Property<decimal?>("BaseAmount")
                        .HasColumnType("numeric(38, 18)")
                        .HasColumnName("base_amount");

                    b.Property<long>("BaseCurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("base_currency_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<decimal?>("FeeAmount")
                        .HasColumnType("numeric(38, 18)")
                        .HasColumnName("fee_amount");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric(38, 18)")
                        .HasColumnName("price");

                    b.Property<long>("QuoteAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("quote_account_id");

                    b.Property<decimal?>("QuoteAmount")
                        .HasColumnType("numeric(38, 18)")
                        .HasColumnName("quote_amount");

                    b.Property<long>("QuoteCurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("quote_currency_id");

                    b.Property<int>("Side")
                        .HasColumnType("integer")
                        .HasColumnName("side");

                    b.Property<string>("StatusDescription")
                        .HasColumnType("text")
                        .HasColumnName("status_description");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    b.HasKey("Id");

                    b.HasIndex("BaseAccountId");

                    b.HasIndex("BaseCurrencyId");

                    b.HasIndex("QuoteAccountId");

                    b.HasIndex("QuoteCurrencyId");

                    b.ToTable("quote_order", (string)null);
                });

            modelBuilder.Entity("GlobalStable.Domain.Entities.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(38, 18)")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("order_type");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("idx_transaction_account_id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("idx_transaction_order_id");

                    b.HasIndex("AccountId", "CreatedAt")
                        .HasDatabaseName("idx_transaction_account_created_at");

                    b.HasIndex("AccountId", "OrderId", "CreatedAt")
                        .HasDatabaseName("idx_transaction_account_order_created_at");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("GlobalStable.Domain.Entities.WithdrawalOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('global_order_id_seq')");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<string>("BlockchainNetworkId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("blockchain_network_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<string>("E2EId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("e2e_id");

                    b.Property<decimal>("FeeAmount")
                        .HasColumnType("numeric(38, 18)")
                        .HasColumnName("fee_amount");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_updated_by");

                    b.Property<string>("ReceiverAccountKey")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("receiver_account_key");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("receiver_name");

                    b.Property<string>("ReceiverTaxId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("receiver_tax_id");

                    b.Property<string>("ReceiverWalletAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("receiver_wallet_address");

                    b.Property<decimal>("RequestedAmount")
                        .HasColumnType("numeric(38, 18)")
                        .HasColumnName("requested_amount");

                    b.Property<string>("StatusDescription")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("status_description");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric(38, 18)")
                        .HasColumnName("total_amount");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("idx_withdrawal_order_account_id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("idx_withdrawal_order_status_id");

                    b.ToTable("withdrawal_order", (string)null);
                });

            modelBuilder.Entity("GlobalStable.Domain.Entities.Account", b =>
                {
                    b.HasOne("GlobalStable.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("GlobalStable.Domain.Entities.BalanceSnapshot", b =>
                {
                    b.HasOne("GlobalStable.Domain.Entities.Currency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GlobalStable.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("GlobalStable.Domain.Entities.BlockchainNetwork", b =>
                {
                    b.HasOne("GlobalStable.Domain.Entities.Currency", "NativeCurrency")
                        .WithMany()
                        .HasForeignKey("NativeCurrencyId");

                    b.Navigation("NativeCurrency");
                });

            modelBuilder.Entity("GlobalStable.Domain.Entities.CurrencyBlockchain", b =>
                {
                    b.HasOne("GlobalStable.Domain.Entities.BlockchainNetwork", "BlockchainNetwork")
                        .WithMany("SupportedCurrencies")
                        .HasForeignKey("BlockchainNetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GlobalStable.Domain.Entities.Currency", "Currency")
                        .WithMany("BlockchainNetworks")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlockchainNetwork");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("GlobalStable.Domain.Entities.DepositOrder", b =>
                {
                    b.HasOne("GlobalStable.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("GlobalStable.Domain.Entities.OrderHistory", b =>
                {
                    b.HasOne("GlobalStable.Domain.Entities.DepositOrder", null)
                        .WithMany("OrderHistory")
                        .HasForeignKey("DepositOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("idx_order_history_deposit_order_id");

                    b.HasOne("GlobalStable.Domain.Entities.WithdrawalOrder", null)
                        .WithMany("OrderHistory")
                        .HasForeignKey("WithdrawalOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_order_history_withdrawal_order");
                });

            modelBuilder.Entity("GlobalStable.Domain.Entities.PendingTransaction", b =>
                {
                    b.HasOne("GlobalStable.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("GlobalStable.Domain.Entities.QuoteOrder", b =>
                {
                    b.HasOne("GlobalStable.Domain.Entities.Account", "BaseAccount")
                        .WithMany()
                        .HasForeignKey("BaseAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GlobalStable.Domain.Entities.Currency", "BaseCurrency")
                        .WithMany()
                        .HasForeignKey("BaseCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GlobalStable.Domain.Entities.Account", "QuoteAccount")
                        .WithMany()
                        .HasForeignKey("QuoteAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GlobalStable.Domain.Entities.Currency", "QuoteCurrency")
                        .WithMany()
                        .HasForeignKey("QuoteCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BaseAccount");

                    b.Navigation("BaseCurrency");

                    b.Navigation("QuoteAccount");

                    b.Navigation("QuoteCurrency");
                });

            modelBuilder.Entity("GlobalStable.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("GlobalStable.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("GlobalStable.Domain.Entities.WithdrawalOrder", b =>
                {
                    b.HasOne("GlobalStable.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("GlobalStable.Domain.Entities.BlockchainNetwork", b =>
                {
                    b.Navigation("SupportedCurrencies");
                });

            modelBuilder.Entity("GlobalStable.Domain.Entities.Currency", b =>
                {
                    b.Navigation("BlockchainNetworks");
                });

            modelBuilder.Entity("GlobalStable.Domain.Entities.DepositOrder", b =>
                {
                    b.Navigation("OrderHistory");
                });

            modelBuilder.Entity("GlobalStable.Domain.Entities.WithdrawalOrder", b =>
                {
                    b.Navigation("OrderHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
