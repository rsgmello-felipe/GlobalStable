<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <RestoreSuccess Condition=" '$(RestoreSuccess)' == '' ">True</RestoreSuccess>
    <RestoreTool Condition=" '$(RestoreTool)' == '' ">NuGet</RestoreTool>
    <ProjectAssetsFile Condition=" '$(ProjectAssetsFile)' == '' ">$(MSBuildThisFileDirectory)project.assets.json</ProjectAssetsFile>
    <NuGetPackageRoot Condition=" '$(NuGetPackageRoot)' == '' ">$(UserProfile)\.nuget\packages\</NuGetPackageRoot>
    <NuGetPackageFolders Condition=" '$(NuGetPackageFolders)' == '' ">C:\Users\felip\.nuget\packages\;C:\Program Files (x86)\Microsoft Visual Studio\Shared\NuGetPackages</NuGetPackageFolders>
    <NuGetProjectStyle Condition=" '$(NuGetProjectStyle)' == '' ">PackageReference</NuGetProjectStyle>
    <NuGetToolVersion Condition=" '$(NuGetToolVersion)' == '' ">6.14.0</NuGetToolVersion>
  </PropertyGroup>
  <ItemGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <SourceRoot Include="C:\Users\felip\.nuget\packages\" />
    <SourceRoot Include="C:\Program Files (x86)\Microsoft Visual Studio\Shared\NuGetPackages\" />
  </ItemGroup>
  <ItemGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\LICENSE.txt" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\LICENSE.txt')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\LICENSE.txt</TargetPath>
      <DestinationSubDirectory>newrelic\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\LICENSE.txt</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\NewRelic.Agent.Core.dll" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\NewRelic.Agent.Core.dll')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\NewRelic.Agent.Core.dll</TargetPath>
      <DestinationSubDirectory>newrelic\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\NewRelic.Agent.Core.dll</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\NewRelic.Agent.Extensions.dll" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\NewRelic.Agent.Extensions.dll')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\NewRelic.Agent.Extensions.dll</TargetPath>
      <DestinationSubDirectory>newrelic\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\NewRelic.Agent.Extensions.dll</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\NewRelic.Api.Agent.dll" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\NewRelic.Api.Agent.dll')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\NewRelic.Api.Agent.dll</TargetPath>
      <DestinationSubDirectory>newrelic\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\NewRelic.Api.Agent.dll</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\NewRelic.Profiler.dll" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\NewRelic.Profiler.dll')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\NewRelic.Profiler.dll</TargetPath>
      <DestinationSubDirectory>newrelic\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\NewRelic.Profiler.dll</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\README.md" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\README.md')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\README.md</TargetPath>
      <DestinationSubDirectory>newrelic\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\README.md</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\THIRD_PARTY_NOTICES.txt" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\THIRD_PARTY_NOTICES.txt')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\THIRD_PARTY_NOTICES.txt</TargetPath>
      <DestinationSubDirectory>newrelic\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\THIRD_PARTY_NOTICES.txt</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\agentinfo.json" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\agentinfo.json')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\agentinfo.json</TargetPath>
      <DestinationSubDirectory>newrelic\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\agentinfo.json</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Storage.AsyncLocal.dll" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Storage.AsyncLocal.dll')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Storage.AsyncLocal.dll</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Storage.AsyncLocal.dll</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.AspNetCore.Instrumentation.xml" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.AspNetCore.Instrumentation.xml')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.AspNetCore.Instrumentation.xml</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.AspNetCore.Instrumentation.xml</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.AspNetCore.dll" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.AspNetCore.dll')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.AspNetCore.dll</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.AspNetCore.dll</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.AspNetCore6Plus.Instrumentation.xml" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.AspNetCore6Plus.Instrumentation.xml')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.AspNetCore6Plus.Instrumentation.xml</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.AspNetCore6Plus.Instrumentation.xml</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.AspNetCore6Plus.dll" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.AspNetCore6Plus.dll')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.AspNetCore6Plus.dll</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.AspNetCore6Plus.dll</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.AwsLambda.Instrumentation.xml" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.AwsLambda.Instrumentation.xml')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.AwsLambda.Instrumentation.xml</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.AwsLambda.Instrumentation.xml</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.AwsLambda.dll" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.AwsLambda.dll')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.AwsLambda.dll</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.AwsLambda.dll</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.AwsSdk.Instrumentation.xml" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.AwsSdk.Instrumentation.xml')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.AwsSdk.Instrumentation.xml</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.AwsSdk.Instrumentation.xml</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.AwsSdk.dll" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.AwsSdk.dll')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.AwsSdk.dll</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.AwsSdk.dll</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.AzureFunction.Instrumentation.xml" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.AzureFunction.Instrumentation.xml')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.AzureFunction.Instrumentation.xml</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.AzureFunction.Instrumentation.xml</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.AzureFunction.dll" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.AzureFunction.dll')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.AzureFunction.dll</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.AzureFunction.dll</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.Bedrock.Instrumentation.xml" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.Bedrock.Instrumentation.xml')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.Bedrock.Instrumentation.xml</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.Bedrock.Instrumentation.xml</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.Bedrock.dll" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.Bedrock.dll')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.Bedrock.dll</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.Bedrock.dll</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.CosmosDb.Instrumentation.xml" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.CosmosDb.Instrumentation.xml')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.CosmosDb.Instrumentation.xml</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.CosmosDb.Instrumentation.xml</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.CosmosDb.dll" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.CosmosDb.dll')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.CosmosDb.dll</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.CosmosDb.dll</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.Elasticsearch.Instrumentation.xml" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.Elasticsearch.Instrumentation.xml')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.Elasticsearch.Instrumentation.xml</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.Elasticsearch.Instrumentation.xml</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.Elasticsearch.dll" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.Elasticsearch.dll')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.Elasticsearch.dll</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.Elasticsearch.dll</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.HttpClient.Instrumentation.xml" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.HttpClient.Instrumentation.xml')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.HttpClient.Instrumentation.xml</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.HttpClient.Instrumentation.xml</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.HttpClient.dll" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.HttpClient.dll')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.HttpClient.dll</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.HttpClient.dll</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.Kafka.Instrumentation.xml" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.Kafka.Instrumentation.xml')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.Kafka.Instrumentation.xml</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.Kafka.Instrumentation.xml</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.Kafka.dll" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.Kafka.dll')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.Kafka.dll</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.Kafka.dll</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.Log4NetLogging.Instrumentation.xml" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.Log4NetLogging.Instrumentation.xml')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.Log4NetLogging.Instrumentation.xml</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.Log4NetLogging.Instrumentation.xml</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.Log4NetLogging.dll" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.Log4NetLogging.dll')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.Log4NetLogging.dll</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.Log4NetLogging.dll</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.MassTransit.Instrumentation.xml" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.MassTransit.Instrumentation.xml')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.MassTransit.Instrumentation.xml</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.MassTransit.Instrumentation.xml</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.MassTransit.dll" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.MassTransit.dll')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.MassTransit.dll</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.MassTransit.dll</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.MassTransitLegacy.Instrumentation.xml" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.MassTransitLegacy.Instrumentation.xml')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.MassTransitLegacy.Instrumentation.xml</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.MassTransitLegacy.Instrumentation.xml</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.MassTransitLegacy.dll" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.MassTransitLegacy.dll')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.MassTransitLegacy.dll</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.MassTransitLegacy.dll</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.Memcached.Instrumentation.xml" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.Memcached.Instrumentation.xml')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.Memcached.Instrumentation.xml</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.Memcached.Instrumentation.xml</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.Memcached.dll" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.Memcached.dll')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.Memcached.dll</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.Memcached.dll</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.MicrosoftExtensionsLogging.Instrumentation.xml" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.MicrosoftExtensionsLogging.Instrumentation.xml')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.MicrosoftExtensionsLogging.Instrumentation.xml</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.MicrosoftExtensionsLogging.Instrumentation.xml</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.MicrosoftExtensionsLogging.dll" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.MicrosoftExtensionsLogging.dll')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.MicrosoftExtensionsLogging.dll</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.MicrosoftExtensionsLogging.dll</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.Misc.Instrumentation.xml" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.Misc.Instrumentation.xml')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.Misc.Instrumentation.xml</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.Misc.Instrumentation.xml</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.MongoDb26.Instrumentation.xml" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.MongoDb26.Instrumentation.xml')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.MongoDb26.Instrumentation.xml</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.MongoDb26.Instrumentation.xml</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.MongoDb26.dll" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.MongoDb26.dll')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.MongoDb26.dll</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.MongoDb26.dll</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.NLogLogging.Instrumentation.xml" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.NLogLogging.Instrumentation.xml')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.NLogLogging.Instrumentation.xml</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.NLogLogging.Instrumentation.xml</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.NLogLogging.dll" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.NLogLogging.dll')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.NLogLogging.dll</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.NLogLogging.dll</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.NServiceBus.Instrumentation.xml" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.NServiceBus.Instrumentation.xml')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.NServiceBus.Instrumentation.xml</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.NServiceBus.Instrumentation.xml</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.NServiceBus.dll" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.NServiceBus.dll')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.NServiceBus.dll</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.NServiceBus.dll</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.OpenAI.Instrumentation.xml" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.OpenAI.Instrumentation.xml')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.OpenAI.Instrumentation.xml</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.OpenAI.Instrumentation.xml</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.OpenAI.dll" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.OpenAI.dll')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.OpenAI.dll</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.OpenAI.dll</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.OpenSearch.Instrumentation.xml" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.OpenSearch.Instrumentation.xml')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.OpenSearch.Instrumentation.xml</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.OpenSearch.Instrumentation.xml</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.OpenSearch.dll" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.OpenSearch.dll')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.OpenSearch.dll</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.OpenSearch.dll</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.RabbitMq.Instrumentation.xml" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.RabbitMq.Instrumentation.xml')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.RabbitMq.Instrumentation.xml</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.RabbitMq.Instrumentation.xml</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.RabbitMq.dll" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.RabbitMq.dll')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.RabbitMq.dll</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.RabbitMq.dll</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.SerilogLogging.Instrumentation.xml" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.SerilogLogging.Instrumentation.xml')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.SerilogLogging.Instrumentation.xml</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.SerilogLogging.Instrumentation.xml</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.SerilogLogging.dll" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.SerilogLogging.dll')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.SerilogLogging.dll</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.SerilogLogging.dll</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.Sql.Instrumentation.xml" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.Sql.Instrumentation.xml')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.Sql.Instrumentation.xml</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.Sql.Instrumentation.xml</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.Sql.dll" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.Sql.dll')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.Sql.dll</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.Sql.dll</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.StackExchangeRedis.Instrumentation.xml" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.StackExchangeRedis.Instrumentation.xml')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.StackExchangeRedis.Instrumentation.xml</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.StackExchangeRedis.Instrumentation.xml</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.StackExchangeRedis.dll" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.StackExchangeRedis.dll')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.StackExchangeRedis.dll</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.StackExchangeRedis.dll</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.StackExchangeRedis2Plus.Instrumentation.xml" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.StackExchangeRedis2Plus.Instrumentation.xml')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.StackExchangeRedis2Plus.Instrumentation.xml</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.StackExchangeRedis2Plus.Instrumentation.xml</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.StackExchangeRedis2Plus.dll" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\NewRelic.Providers.Wrapper.StackExchangeRedis2Plus.dll')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\NewRelic.Providers.Wrapper.StackExchangeRedis2Plus.dll</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\NewRelic.Providers.Wrapper.StackExchangeRedis2Plus.dll</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\extension.xsd" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\extensions\extension.xsd')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\extensions\extension.xsd</TargetPath>
      <DestinationSubDirectory>newrelic\extensions\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\extensions\extension.xsd</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\libNewRelicProfiler.so" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\libNewRelicProfiler.so')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\libNewRelicProfiler.so</TargetPath>
      <DestinationSubDirectory>newrelic\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\libNewRelicProfiler.so</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\linux-arm64\libNewRelicProfiler.so" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\linux-arm64\libNewRelicProfiler.so')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\linux-arm64\libNewRelicProfiler.so</TargetPath>
      <DestinationSubDirectory>newrelic\linux-arm64\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\linux-arm64\libNewRelicProfiler.so</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\logs\placeholder" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\logs\placeholder')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\logs\placeholder</TargetPath>
      <DestinationSubDirectory>newrelic\logs\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\logs\placeholder</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\newrelic.config" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\newrelic.config')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\newrelic.config</TargetPath>
      <DestinationSubDirectory>newrelic\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\newrelic.config</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\newrelic.xsd" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\newrelic.xsd')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\newrelic.xsd</TargetPath>
      <DestinationSubDirectory>newrelic\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\newrelic.xsd</Link>
    </None>
    <None Include="$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\x86\NewRelic.Profiler.dll" Condition="Exists('$(NuGetPackageRoot)newrelic.agent\10.38.0\contentFiles\any\netstandard2.0\newrelic\x86\NewRelic.Profiler.dll')">
      <NuGetPackageId>NewRelic.Agent</NuGetPackageId>
      <NuGetPackageVersion>10.38.0</NuGetPackageVersion>
      <NuGetItemType>None</NuGetItemType>
      <Pack>false</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>newrelic\x86\NewRelic.Profiler.dll</TargetPath>
      <DestinationSubDirectory>newrelic\x86\</DestinationSubDirectory>
      <Private>True</Private>
      <Link>newrelic\x86\NewRelic.Profiler.dll</Link>
    </None>
  </ItemGroup>
  <ImportGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <Import Project="$(NuGetPackageRoot)microsoft.extensions.apidescription.server\6.0.5\build\Microsoft.Extensions.ApiDescription.Server.props" Condition="Exists('$(NuGetPackageRoot)microsoft.extensions.apidescription.server\6.0.5\build\Microsoft.Extensions.ApiDescription.Server.props')" />
    <Import Project="$(NuGetPackageRoot)swashbuckle.aspnetcore\7.3.1\build\Swashbuckle.AspNetCore.props" Condition="Exists('$(NuGetPackageRoot)swashbuckle.aspnetcore\7.3.1\build\Swashbuckle.AspNetCore.props')" />
    <Import Project="$(NuGetPackageRoot)refit\8.0.0\buildTransitive\netstandard2.0\refit.props" Condition="Exists('$(NuGetPackageRoot)refit\8.0.0\buildTransitive\netstandard2.0\refit.props')" />
    <Import Project="$(NuGetPackageRoot)microsoft.entityframeworkcore\9.0.3\buildTransitive\net8.0\Microsoft.EntityFrameworkCore.props" Condition="Exists('$(NuGetPackageRoot)microsoft.entityframeworkcore\9.0.3\buildTransitive\net8.0\Microsoft.EntityFrameworkCore.props')" />
    <Import Project="$(NuGetPackageRoot)microsoft.visualstudio.azure.containers.tools.targets\1.19.6\build\Microsoft.VisualStudio.Azure.Containers.Tools.Targets.props" Condition="Exists('$(NuGetPackageRoot)microsoft.visualstudio.azure.containers.tools.targets\1.19.6\build\Microsoft.VisualStudio.Azure.Containers.Tools.Targets.props')" />
    <Import Project="$(NuGetPackageRoot)microsoft.codeanalysis.analyzers\3.3.4\buildTransitive\Microsoft.CodeAnalysis.Analyzers.props" Condition="Exists('$(NuGetPackageRoot)microsoft.codeanalysis.analyzers\3.3.4\buildTransitive\Microsoft.CodeAnalysis.Analyzers.props')" />
    <Import Project="$(NuGetPackageRoot)microsoft.entityframeworkcore.design\9.0.3\build\net8.0\Microsoft.EntityFrameworkCore.Design.props" Condition="Exists('$(NuGetPackageRoot)microsoft.entityframeworkcore.design\9.0.3\build\net8.0\Microsoft.EntityFrameworkCore.Design.props')" />
  </ImportGroup>
  <PropertyGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <PkgMicrosoft_Extensions_ApiDescription_Server Condition=" '$(PkgMicrosoft_Extensions_ApiDescription_Server)' == '' ">C:\Users\felip\.nuget\packages\microsoft.extensions.apidescription.server\6.0.5</PkgMicrosoft_Extensions_ApiDescription_Server>
    <PkgNewRelic_Agent Condition=" '$(PkgNewRelic_Agent)' == '' ">C:\Users\felip\.nuget\packages\newrelic.agent\10.38.0</PkgNewRelic_Agent>
    <PkgMicrosoft_VisualStudio_Azure_Containers_Tools_Targets Condition=" '$(PkgMicrosoft_VisualStudio_Azure_Containers_Tools_Targets)' == '' ">C:\Users\felip\.nuget\packages\microsoft.visualstudio.azure.containers.tools.targets\1.19.6</PkgMicrosoft_VisualStudio_Azure_Containers_Tools_Targets>
    <PkgMicrosoft_CodeAnalysis_Analyzers Condition=" '$(PkgMicrosoft_CodeAnalysis_Analyzers)' == '' ">C:\Users\felip\.nuget\packages\microsoft.codeanalysis.analyzers\3.3.4</PkgMicrosoft_CodeAnalysis_Analyzers>
    <PkgMicrosoft_EntityFrameworkCore_Tools Condition=" '$(PkgMicrosoft_EntityFrameworkCore_Tools)' == '' ">C:\Users\felip\.nuget\packages\microsoft.entityframeworkcore.tools\9.0.3</PkgMicrosoft_EntityFrameworkCore_Tools>
  </PropertyGroup>
</Project>